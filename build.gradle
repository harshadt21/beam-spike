// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

plugins {
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

test {
    useJUnit()
}
def sparkVersion = '3.5.0'


dependencies {
    // Core Beam SDK
    implementation "org.apache.beam:beam-sdks-java-core:2.67.0"

    // Spark
    implementation "org.apache.spark:spark-core_2.12:${sparkVersion}"
    implementation "org.apache.spark:spark-sql_2.12:${sparkVersion}"

    // Spark Kafka Connector
    implementation "org.apache.spark:spark-sql-kafka-0-10_2.12:${sparkVersion}"


    // The Flink Runner (to run on Flink cluster)
    implementation "org.apache.beam:beam-runners-flink-1.18:2.67.0"

    // Kafka IO for Beam
    implementation "org.apache.beam:beam-sdks-java-io-kafka:2.67.0"

    // Flink core libraries and clients
    implementation 'org.apache.flink:flink-streaming-java:1.18.1'
    implementation 'org.apache.flink:flink-clients:1.18.1'

    // Kafka clients
    implementation "org.apache.kafka:kafka-clients:3.5.1"

    // Other application-specific dependencies
    implementation "joda-time:joda-time:2.12.7"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation "org.slf4j:slf4j-api:2.0.16"
    implementation "org.slf4j:slf4j-jdk14:2.0.16"

    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

application {
    // âœ… This sets the main class for both `run` and shadowJar
    mainClass = 'com.example.GroupIntoBatchesKafkaIO'
}

shadowJar {
    archiveBaseName.set('my-flink-beam-job')
    archiveVersion.set('1.0.0')
    destinationDirectory.set(file('build/libs'))

    zip64 true

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    mergeServiceFiles {
        include 'META-INF/services/*'
    }

    // Exclude unnecessary metadata
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    // Avoid build failure on duplicate classes/resources
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
